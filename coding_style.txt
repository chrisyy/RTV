Indentation: 2 spaces

Comment:
/* ... */

// ABCDEFG

/*
 * ABCDEFG
 * ...
 */

data types:
for string, use char;
otherwise, be explicit with bit length (stdint types):
int32_t, uint8_t, ...


(use upper case for constant hex numbers)
int *ptr = 0xFC01;

TypeA X = (TypeA) Y;

TypeABCDEFGHIJKLMN X
  = 18204850238;

TypeA *X = (TypeA *) Y;
*Y = 38054;

when there is only one line in a if, no brackets:
if (x)
  foo();

if (x) {
  ...
} else {
  ...
}

if (x && y) {
  ...
}

switch (cond) {
case x:
  a++;
  break;

case y:
  b--;
  break;
}

for (i = 1; i < limit; i++) {
  ...
}

do {
  ...
} while (x);

y = foo(x);

void foo(uint32_t a, uint32_t b, uint32_t c,
         uint32_t d, uint32_t e)
{
  ...
}

y = foo(a, b, c,
        d, e);


(single space)
#define XYZ 12
#define DDDDD (12 * 10)

typedef struct _TypeA {
  ...
} TypeA;

struct TypeA {
  int bits : 12;
  ...
};


__asm__ volatile("abc" : y : "a" (x) : z);

__asm__ volatile("abc" : y 
                 : "a" (x) : z);


Function naming: lower case
int module_action(...)

Type naming: lower case

Variables defined at the top of its scope:
int foo()
{
  int a;

  ...

  if (...) {
    int b;
    ...
    print(b);
  }

  set(a);
}

int *memcpy();
