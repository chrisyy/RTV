Indentation: 2 spaces

Comment:
/* ... */

// ABCDEFG

/*
 * ABCDEFG
 * ...
 */

data types:
for string, use char;
otherwise, be explicit with bit length (stdint types):
int32_t, uint8_t, ...


(use upper case for constant hex numbers)
int *ptr = 0xFC01;

type_a X = (type_a) Y;

type_ljiemsenoicpeo X
  = 18204850238;

type_a *X = (type_a *) Y;
*Y = 38054;

when there is only one line in a if/else/for/while, no brackets, in two separate lines:
if (x)
  foo();

if (x) {
  ...
} else {
  ...
}

if (x && y) {
  ...
}

switch (cond) {
case x:
  a++;
  break;

case y:
  b--;
  break;
}

for (i = 1; i < limit; i++) {
  ...
}

for (i = .................;
     i < .................;
     i ...................) {
  ...     
}

do {
  ...
} while (x);

Function:
y = foo(x);

void foo(uint32_t a, uint32_t b, uint32_t c,
         uint32_t d, uint32_t e)
{
  ...
}

y = foo(a, b, c,
        d, e);

declaration: with argument names
extern void foo(int a, int b);

MACRO: capital letter
#define XYZ 12
#define DDDDD (12 * 10)

uint8_t table __attribute__ ((aligned (8)));

typedef struct _type_a {
  ...
} type_a_t;

struct type_a {
  int bits : 12;
  ...
};

__asm__ volatile("abc" : y : "a" (x) : z);

__asm__ volatile("abc" : y 
                 : "a" (x) : z);

Function naming: lower case 
for external-facing interface of a module, add the module name:
int module_action(...)

Type naming: lower case

Variables defined at the top of its scope:
int foo()
{
  int a;

  ...

  if (...) {
    int b;
    ...
    print(b);
  }

  set(a);
}

return type: pointer
int *memcpy();
